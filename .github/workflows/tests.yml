name: Tests

on: [pull_request]

jobs:
  test:
    name: Tests on ${{ matrix.os }}, Node.js v${{ matrix.node }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: [12, 14, 16]

    steps:
    - uses: actions/checkout@v3

    - name: Install node
      uses: actions/setup-node@v3.1.0
      with:
        cache: "npm"
        node-version: ${{ matrix.node }}

    - name: npm install
      run: npm install

    - name: Run tests
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true

  e2e_tests:
    name: End-to-end tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Read .node-version
      run: echo "##[set-output name=node-version;]$(cat '.node-version')"
      id: node-version

    - name: Install node
      uses: actions/setup-node@v3.1.0
      with:
        cache: "npm"
        node-version: "${{ steps.node-version.outputs.node-version }}"

    - name: npm install
      run: npm install

    - name: Install expect
      run: sudo apt-get install expect

    - name: Run end-to-end tests
      run: ./e2e-tests/test.sh
      timeout-minutes: 5

  check_lint:
    name: Check for linting issues
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Read .node-version
      run: echo "##[set-output name=node-version;]$(cat .node-version)"
      id: node-version

    - name: Install node
      uses: actions/setup-node@v3.1.0
      with:
        cache: "npm"
        node-version: "${{ steps.node-version.outputs.node-version }}"

    - name: npm install
      run: npm install

    - name: Check for linting errors
      run: npm run lint -- --max-warnings=0

  check_format:
    name: Check for formatting issues
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Read .node-version
      run: echo "##[set-output name=node-version;]$(cat .node-version)"
      id: node-version

    - name: Install node
      uses: actions/setup-node@v3.1.0
      with:
        cache: "npm"
        node-version: "${{ steps.node-version.outputs.node-version }}"

    - name: npm install
      run: npm install

    - name: Check code format
      run: npm run format:check

  check_lint-staged:
    name: Check lint-staged config
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Read .node-version
      run: echo "##[set-output name=node-version;]$(cat .node-version)"
      id: node-version

    - name: Install node
      uses: actions/setup-node@v3.1.0
      with:
        cache: "npm"
        node-version: "${{ steps.node-version.outputs.node-version }}"

    - name: npm install
      run: npm install

    - name: Check lint-staged functions
      run: npx lint-staged
